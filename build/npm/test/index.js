"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _src = _interopRequireDefault(require("../src"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var create, define, eq, gte, isEqual, isFunction, isKind, isNumber, isString, isType, lookup, lte;
({
  isType,
  isKind,
  isFunction,
  isString,
  isNumber,
  isEqual,
  eq,
  gte,
  lte
} = require("panda-parchment"));
({
  create,
  define,
  lookup
} = _src.default);

(async function () {
  (0, _amen.print)((await (0, _amen.test)("Generics", [(0, _amen.test)("Fibonacci function", function () {
    var fib;
    fib = create({
      name: "fib",
      description: "Fibonacci sequence"
    });
    define(fib, gte(1), function (n) {
      return fib(n - 1) + fib(n - 2);
    });
    define(fib, eq(1), function () {
      return 1;
    });
    define(fib, eq(2), function () {
      return 1;
    });
    return [(0, _amen.test)("matches simple predicates", function () {
      return (0, _assert.default)(fib(5) === 5);
    }), (0, _amen.test)("throws with name/arguments on type error", function () {
      console.warn("throws test only works on node 10+");
      return _assert.default.throws(function () {
        return fib(0);
      }, {
        message: "fib: Invalid arguments.",
        arguments: [0]
      });
    })];
  }()), (0, _amen.test)("Polymorphic dispatch", function () {
    var A, B, a, b, foo;
    A = class A {};
    B = class B extends A {};
    a = new A();
    b = new B();
    foo = create();
    define(foo, isKind(A), function () {
      return "foo: A";
    });
    define(foo, isType(B), function () {
      return "foo: B";
    });
    define(foo, isKind(A), isKind(B), function () {
      return "foo: A + B";
    });
    define(foo, isKind(B), isKind(A), function () {
      return "foo: B + A";
    });
    define(foo, eq(a), eq(b), function () {
      return "foo: a + b";
    });
    (0, _assert.default)(foo(b) === "foo: B");
    (0, _assert.default)(foo(a, b) === "foo: a + b");
    (0, _assert.default)(foo(b, a) === "foo: B + A");
    return _assert.default.throws(function () {
      return foo(b, a, b);
    });
  }), (0, _amen.test)("Variadic arguments", function () {
    var bar;
    bar = create();
    define(bar, String, function () {
      return true;
    }, function (x, ...a) {
      return a[0];
    });
    define(bar, Number, function () {
      return true;
    }, function (x, ...a) {
      return x;
    });
    return (0, _assert.default)(bar("foo", 1, 2, 3) === 1);
  }), (0, _amen.test)("Predicate functions", function () {
    var baz;
    baz = create();
    define(baz, function (x) {
      return x !== 7;
    }, function () {
      return false;
    });
    define(baz, function (x) {
      return x === 7;
    }, function (x) {
      return true;
    });
    (0, _assert.default)(baz(7));
    return (0, _assert.default)(!baz(6));
  }), (0, _amen.test)("Generics are functions", function () {
    return (0, _assert.default)(isFunction(create()));
  }), (0, _amen.test)("Lookups", function () {
    var f, foo;
    foo = create();
    define(foo, isNumber, function (x) {
      return x + x;
    });
    define(foo, isString, function (x) {
      return false;
    });
    f = lookup(foo, [7]);
    return (0, _assert.default)(f(7) === 14);
  })])));
  return process.exit(_amen.success ? 0 : 1);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keS9yZXBvcy9wYW5kYXN0cmlrZS9wYW5kYS1nZW5lcmljcy90ZXN0L2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUtBOzs7O0FBTkEsSUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7QUFHQSxDQUFBO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQSxVQUFBO0FBQUEsRUFBQSxRQUFBO0FBQUEsRUFBQSxRQUFBO0FBQUEsRUFBQSxPQUFBO0FBQUEsRUFBQSxFQUFBO0FBQUEsRUFBQSxHQUFBO0FBQUEsRUFBQTtBQUFBLElBQzJCLE9BQUEsQ0FEM0IsaUJBQzJCLENBRDNCO0FBSUEsQ0FBQTtBQUFBLEVBQUEsTUFBQTtBQUFBLEVBQUEsTUFBQTtBQUFBLEVBQUE7QUFBQSxJQUFBLFlBQUE7O0FBRUcsQ0FBQSxrQkFBQTtBQUVELG9CQUFNLE1BQU0sZ0JBQUEsVUFBQSxFQUFpQixDQUUzQixnQkFBQSxvQkFBQSxFQUE4QixZQUFBO0FBRTVCLFFBQUEsR0FBQTtBQUFBLElBQUEsR0FBQSxHQUFNLE1BQUEsQ0FDSjtBQUFBLE1BQUEsSUFBQSxFQUFBLEtBQUE7QUFDQSxNQUFBLFdBQUEsRUFBYTtBQURiLEtBREksQ0FBTjtBQUlBLElBQUEsTUFBQSxDQUFBLEdBQUEsRUFBYSxHQUFBLENBQWIsQ0FBYSxDQUFiLEVBQXFCLFVBQUEsQ0FBQSxFQUFBO2FBQVEsR0FBQSxDQUFJLENBQUEsR0FBTCxDQUFDLENBQUQsR0FBZSxHQUFBLENBQUksQ0FBQSxHQUFMLENBQUMsQztBQUEzQyxLQUFBLENBQUE7QUFDQSxJQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQWEsRUFBQSxDQUFiLENBQWEsQ0FBYixFQUFvQixZQUFBO2FB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QUEsQ0FBRCxDQUFDLENBQUQsS0FBUCxFQUFBLEM7QUExRXlCLEdBa0UzQixDQWxFMkIsQ0FBakIsQ0FBWjtTQThFQSxPQUFPLENBQVAsSUFBQSxDQUFhLGdCQUFBLENBQUEsR0FBYixDQUFBLEM7QUFoRkYsQ0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQge3Rlc3QsIHByaW50LCBzdWNjZXNzfSBmcm9tIFwiYW1lblwiXG5cbntpc1R5cGUsIGlzS2luZCwgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLFxuICBpc0VxdWFsLCBlcSwgZ3RlLCBsdGV9ID0gcmVxdWlyZSBcInBhbmRhLXBhcmNobWVudFwiXG5cbmltcG9ydCBHZW5lcmljIGZyb20gXCIuLi9zcmNcIlxue2NyZWF0ZSwgZGVmaW5lLCBsb29rdXB9ID0gR2VuZXJpY1xuXG5kbyAtPlxuXG4gIHByaW50IGF3YWl0IHRlc3QgXCJHZW5lcmljc1wiLCBbXG5cbiAgICB0ZXN0IFwiRmlib25hY2NpIGZ1bmN0aW9uXCIsIGRvIC0+XG5cbiAgICAgIGZpYiA9IGNyZWF0ZVxuICAgICAgICBuYW1lOiBcImZpYlwiXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkZpYm9uYWNjaSBzZXF1ZW5jZVwiXG5cbiAgICAgIGRlZmluZSBmaWIsIChndGUgMSksIChuKSAtPiAoZmliIG4gLSAxKSArIChmaWIgbiAtIDIpXG4gICAgICBkZWZpbmUgZmliLCAoZXEgMSksIC0+IDFcbiAgICAgIGRlZmluZSBmaWIsIChlcSAyKSwgLT4gMVxuXG4gICAgICBbXG5cbiAgICAgICAgdGVzdCBcIm1hdGNoZXMgc2ltcGxlIHByZWRpY2F0ZXNcIiwgLT5cbiAgICAgICAgICBhc3NlcnQgKGZpYiA1KSA9PSA1XG5cbiAgICAgICAgdGVzdCBcInRocm93cyB3aXRoIG5hbWUvYXJndW1lbnRzIG9uIHR5cGUgZXJyb3JcIiwgLT5cbiAgICAgICAgICBjb25zb2xlLndhcm4gXCJ0aHJvd3MgdGVzdCBvbmx5IHdvcmtzIG9uIG5vZGUgMTArXCJcbiAgICAgICAgICBhc3NlcnQudGhyb3dzICgtPiBmaWIgMCksXG4gICAgICAgICAgICBtZXNzYWdlOiBcImZpYjogSW52YWxpZCBhcmd1bWVudHMuXCJcbiAgICAgICAgICAgIGFyZ3VtZW50czogWyAwIF1cblxuICAgICAgXVxuXG4gICAgdGVzdCBcIlBvbHltb3JwaGljIGRpc3BhdGNoXCIsIC0+XG5cbiAgICAgIGNsYXNzIEFcbiAgICAgIGNsYXNzIEIgZXh0ZW5kcyBBXG5cbiAgICAgIGEgPSBuZXcgQVxuICAgICAgYiA9IG5ldyBCXG5cbiAgICAgIGZvbyA9IGNyZWF0ZSgpXG4gICAgICBkZWZpbmUgZm9vLCAoaXNLaW5kIEEpLCAtPiBcImZvbzogQVwiXG4gICAgICBkZWZpbmUgZm9vLCAoaXNUeXBlIEIpLCAtPiBcImZvbzogQlwiXG4gICAgICBkZWZpbmUgZm9vLCAoaXNLaW5kIEEpLCAoaXNLaW5kIEIpLCAtPiBcImZvbzogQSArIEJcIlxuICAgICAgZGVmaW5lIGZvbywgKGlzS2luZCBCKSwgKGlzS2luZCBBKSwgLT4gXCJmb286IEIgKyBBXCJcbiAgICAgIGRlZmluZSBmb28sIChlcSBhKSwgKGVxIGIpLCAtPiBcImZvbzogYSArIGJcIlxuXG4gICAgICBhc3NlcnQgKGZvbyBiKSA9PSBcImZvbzogQlwiXG4gICAgICBhc3NlcnQgKGZvbyBhLCBiKSA9PSBcImZvbzogYSArIGJcIlxuICAgICAgYXNzZXJ0IChmb28gYiwgYSkgPT0gXCJmb286IEIgKyBBXCJcbiAgICAgIGFzc2VydC50aHJvd3MgLT5cbiAgICAgICAgZm9vIGIsIGEsIGJcblxuICAgIHRlc3QgXCJWYXJpYWRpYyBhcmd1bWVudHNcIiwgLT5cblxuICAgICAgYmFyID0gY3JlYXRlKClcbiAgICAgIGRlZmluZSBiYXIsIFN0cmluZywgKC0+IHRydWUpLCAoeCwgYS4uLikgLT4gYVswXVxuICAgICAgZGVmaW5lIGJhciwgTnVtYmVyLCAoLT4gdHJ1ZSksICh4LCBhLi4uKSAtPiB4XG5cbiAgICAgIGFzc2VydCAoYmFyIFwiZm9vXCIsIDEsIDIsIDMpID09IDFcblxuICAgIHRlc3QgXCJQcmVkaWNhdGUgZnVuY3Rpb25zXCIsIC0+XG5cbiAgICAgIGJheiA9IGNyZWF0ZSgpXG4gICAgICBkZWZpbmUgYmF6LCAoKHgpIC0+IHggIT0gNyksIC0+IGZhbHNlXG4gICAgICBkZWZpbmUgYmF6LCAoKHgpIC0+IHggPT0gNyksICh4KSAtPiB0cnVlXG5cbiAgICAgIGFzc2VydCAoYmF6IDcpXG4gICAgICBhc3NlcnQgIShiYXogNilcblxuICAgIHRlc3QgXCJHZW5lcmljcyBhcmUgZnVuY3Rpb25zXCIsIC0+XG4gICAgICBhc3NlcnQgaXNGdW5jdGlvbiBjcmVhdGUoKVxuXG4gICAgdGVzdCBcIkxvb2t1cHNcIiwgLT5cblxuICAgICAgZm9vID0gY3JlYXRlKClcblxuICAgICAgZGVmaW5lIGZvbywgaXNOdW1iZXIsICh4KSAtPiB4ICsgeFxuICAgICAgZGVmaW5lIGZvbywgaXNTdHJpbmcsICh4KSAtPiBmYWxzZVxuXG4gICAgICBmID0gbG9va3VwIGZvbywgWyA3IF1cbiAgICAgIGFzc2VydCAoZiA3KSA9PSAxNFxuXG4gIF1cblxuICBwcm9jZXNzLmV4aXQgaWYgc3VjY2VzcyB0aGVuIDAgZWxzZSAxXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/dy/repos/pandastrike/panda-generics/test/index.coffee